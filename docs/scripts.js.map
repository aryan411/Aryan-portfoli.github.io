{"version":3,"sources":["node_modules/angular-colorthief/angular-colorthief.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,UAAU;;AAEV;;AAEA,WAAW,uBAAuB,GAAG,uBAAuB;;AAE5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA,yCAAyC,QAAQ;AACjD;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;;AAEA,sBAAsB,OAAO;;AAE7B;AACA;;AAEA;;AAEA,sBAAsB,OAAO;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,GAAG","file":"scripts.js","sourcesContent":["'use strict';\r\n\r\nrequire(\"./color-thief\");\r\n\r\nangular.module('ngColorThief', [])\r\n  .provider('$colorThief', [function () {\r\n    /**\r\n     This will hold the global ColorThief instance\r\n     */\r\n    var colorThief = new ColorThief();\r\n\r\n    /**\r\n     Holds the default quality set by the user.\r\n     */\r\n    var defaultQuality;\r\n\r\n    /**\r\n     Holds the default colorCount set by the user.\r\n     */\r\n    var defaultColorCount;\r\n\r\n    /**\r\n     If true, colors will be returned as an object like so:\r\n\r\n         {r: 255, g: 200, b: 150}\r\n\r\n     Same for arrays (palettes):\r\n\r\n         [{r: 255, g: 200, b: 150}, {r: 250, g: 190, b: 150}]\r\n\r\n     */\r\n    var returnObjects = false;\r\n\r\n    /**\r\n     Will overwrite ColorThief's default quality\r\n     */\r\n    this.setDefaultQuality = function (quality) {\r\n      defaultQuality = quality;\r\n    };\r\n\r\n    /**\r\n     Will overwrite ColorThief's default colorCount for the\r\n     palettes calculation.\r\n     */\r\n    this.setDefaultColorCount = function (colorCount) {\r\n      defaultColorCount = colorCount;\r\n    };\r\n\r\n    /**\r\n     Will set the returnObjects setting to the passed value\r\n     */\r\n    this.setReturnObjects = function (setting) {\r\n      returnObjects = setting;\r\n    };\r\n\r\n    /**\r\n     Public service API\r\n     */\r\n    this.$get = [function () {\r\n      function mapColor(color) {\r\n        if ( ! returnObjects) {\r\n          return color;\r\n        }\r\n\r\n        return {\r\n          r: color[0],\r\n          g: color[1],\r\n          b: color[2]\r\n        };\r\n      }\r\n\r\n      return {\r\n        getColor: function (image, quality) {\r\n          return mapColor(colorThief.getColor(image, quality || defaultQuality));\r\n        },\r\n\r\n        getPalette: function (image, colorCount, quality) {\r\n          var colors = colorThief.getPalette(image, colorCount || defaultColorCount, quality || defaultQuality);\r\n\r\n          for (var i = colors.length - 1; i >= 0; i--) {\r\n            colors[i] = mapColor(colors[i]);\r\n          };\r\n\r\n          return colors;\r\n        }\r\n      };\r\n    }];\r\n  }])\r\n\r\n  /**\r\n   Apply this directive to an IMG tag and supply a variable name where\r\n   the color palette will be set. For example:\r\n\r\n       <img ng-src=\"{{mySrc}}\" color-thief color-thief-dominant=\"myDominantColor\">\r\n\r\n   This will calculate the dominant color of the image and set it to the myColor variable on\r\n   the scope.\r\n\r\n   If you want an 8 color palette, add a colorThiefPallette directive, like so:\r\n\r\n       <img ng-src=\"{{mySrc}}\" color-thief color-thief-palette=\"myPalette\" color-thief-palette-count=\"8\">\r\n\r\n   colorThiefPaletteCount is 8 by default, so there's no need to define it if you need 8 colors.\r\n\r\n   Note: a color count of 1 is not valid and will throw an error.\r\n   */\r\n  .directive('colorThief', ['$parse', '$colorThief', function ($parse, $colorThief) {\r\n    return {\r\n      restrict: 'A',\r\n      scope: {\r\n        dominant: '=colorThiefDominant',\r\n        palette: '=colorThiefPalette'\r\n      },\r\n      link: function (scope, element, attrs) {\r\n        if (angular.uppercase(element[0].tagName) !== 'IMG') {\r\n          throw new Error('The colorThief directive has to be applied to an IMG tag.');\r\n        }\r\n\r\n        // Allow configuring the image to retrieve CORS-enabled images.\r\n        if (angular.isDefined(attrs.crossorigin) || angular.isDefined(attrs.crossOrigin)) {\r\n          element[0].crossOrigin = attrs.crossorigin || attrs.crossOrigin || 'Anonymous';\r\n        }\r\n\r\n        // Set it to undefined by default to allow the provider's default count overwrite this if needed\r\n        var paletteCount = attrs.colorThiefPaletteCount ? $parse(attrs.colorThiefPaletteCount)() : undefined;\r\n\r\n        // Everytime the image loads, calculate the colors again\r\n        element.on('load', function () {\r\n          scope.$apply(function () {\r\n            if (attrs.colorThiefDominant) {\r\n              scope.dominant = $colorThief.getColor(element[0]);\r\n            }\r\n\r\n            if (attrs.colorThiefPalette) {\r\n              scope.palette = $colorThief.getPalette(element[0], paletteCount);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n"],"sourceRoot":"webpack:///"}